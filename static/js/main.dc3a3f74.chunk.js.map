{"version":3,"sources":["cmps/DaysList.js","cmps/CityFilter.js","services/WeatherService.js","pages/WeatherPage.js","App.js","serviceWorker.js","index.js"],"names":["React","memo","_ref","tableList","list","map","day","react_default","a","createElement","key","_id","className","name","src","img","alt","title","style","height","charAt","toUpperCase","slice","temp","type","placeholder","days","WeatherService","getThreeDays","numberPage","today","Date","getDay","threeDays","Promise","resolve","_useState","useState","_useState2","Object","slicedToArray","setDays","_useState3","_useState4","pageNumber","setPageNumber","useEffect","asyncToGenerator","regenerator_default","mark","_callee","serviceDays","wrap","_context","prev","next","sent","stop","togglePage","_ref2","_callee2","_serviceDays","_context2","apply","this","arguments","cmps_CityFilter","onClick","cmps_DaysList","App","pages_WeatherPage","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dc3a3f74.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nfunction DaysList({ list }) {\r\n\r\n  const tableList = list.map(day => {\r\n    return <ul key={day._id}>\r\n      <li className=\"name\">{day.name}</li>\r\n      <li className=\"icon\">\r\n        <img src={day.img} alt={day.title} style={{height: day.title === 'sunny' ? '6.5em' : '5em'}}\r\n        title={day.title.charAt(0).toUpperCase() + day.title.slice(1)} />\r\n      </li>\r\n      <li className=\"temp\">{day.temp[0]}°/{day.temp[1]}°</li>\r\n      <li className=\"title\">{day.title}</li>\r\n    </ul>\r\n  })\r\n\r\n  return (\r\n    <div className=\"days-list flex\">\r\n      {tableList && tableList}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default React.memo(DaysList);","import React from 'react';\r\n\r\nfunction CityFilter() {\r\n\r\n  return (\r\n    <div className=\"city-filter flex space-even align-center\">\r\n      <div className=\"wrap-img flex space-center align-center\">\r\n        <img src=\"assets/img/icons/search.png\" alt=\"Search\" title=\"Search\"/>\r\n      </div>\r\n      <input type=\"text\" placeholder=\"Search another city\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default React.memo(CityFilter);","const days = [\r\n    {\r\n        _id: '101',\r\n        name: 'sunday',\r\n        img: 'assets/img/icons/cloudy.png',\r\n        temp: [23, 16],\r\n        title: 'cloudy'\r\n    },\r\n    {\r\n        _id: '102',\r\n        name: 'monday',\r\n        img: 'assets/img/icons/sunny.png',\r\n        temp: [26, 19],\r\n        title: 'sunny'\r\n    },\r\n    {\r\n        _id: '103',\r\n        name: 'tuesday',\r\n        img: 'assets/img/icons/rain.png',\r\n        temp: [20, 12],\r\n        title: 'rain'\r\n    },\r\n    {\r\n        _id: '104',\r\n        name: 'wednesday',\r\n        img: 'assets/img/icons/rain.png',\r\n        temp: [14, 6],\r\n        title: 'rain'\r\n    },\r\n    {\r\n        _id: '105',\r\n        name: 'thursday',\r\n        img: 'assets/img/icons/cloudy.png',\r\n        temp: [20, 12],\r\n        title: 'cloudy'\r\n    },\r\n    {\r\n        _id: '106',\r\n        name: 'friday',\r\n        img: 'assets/img/icons/sunny.png',\r\n        temp: [34, 22],\r\n        title: 'sunny'\r\n    },\r\n    {\r\n        _id: '107',\r\n        name: 'saturday',\r\n        img: 'assets/img/icons/rain.png',\r\n        temp: [16, 8],\r\n        title: 'rain'\r\n    },\r\n    {\r\n        _id: '101',\r\n        name: 'sunday',\r\n        img: 'assets/img/icons/cloudy.png',\r\n        temp: [23, 16],\r\n        title: 'cloudy'\r\n    },\r\n    {\r\n        _id: '102',\r\n        name: 'monday',\r\n        img: 'assets/img/icons/sunny.png',\r\n        temp: [26, 19],\r\n        title: 'sunny'\r\n    },\r\n    {\r\n        _id: '103',\r\n        name: 'tuesday',\r\n        img: 'assets/img/icons/rain.png',\r\n        temp: [20, 12],\r\n        title: 'rain'\r\n    }\r\n]\r\n\r\n\r\nfunction getThreeDays(numberPage) {\r\n    const today = new Date().getDay() + (numberPage ? 3 : 0);\r\n    const threeDays = [days[today + 1], days[today + 2], days[today + 3]];\r\n    return Promise.resolve(threeDays)\r\n}\r\n\r\nexport default {\r\n    getThreeDays\r\n}","import React, { useState, useEffect } from 'react';\r\n\r\nimport DaysList from '../cmps/DaysList';\r\nimport CityFilter from '../cmps/CityFilter';\r\nimport WeatherService from '../services/WeatherService';\r\n\r\nfunction WeatherPage() {\r\n\r\n  const [threeDays, setDays] = useState('');\r\n  const [pageNumber, setPageNumber] = useState(0);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const serviceDays = await WeatherService.getThreeDays(0);\r\n      setDays(serviceDays);\r\n    })();\r\n  }, []);\r\n\r\n  const togglePage = async () => {\r\n    if (pageNumber === 0) {\r\n      const serviceDays = await WeatherService.getThreeDays(1);\r\n      setDays(serviceDays);\r\n      setPageNumber(1);\r\n    } else {\r\n      const serviceDays = await WeatherService.getThreeDays(0);\r\n      setDays(serviceDays);\r\n      setPageNumber(0);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"weather-page\">\r\n      <div className=\"main flex-col\">\r\n        <CityFilter />\r\n        <div className=\"display-weather\">\r\n          <div className=\"arrow-icon\">\r\n            <img className={pageNumber ? 'rotate180' : ''}\r\n              onClick={togglePage} src=\"assets/img/icons/arrow.png\" alt=\"Arrow\" title=\"Arrow\" />\r\n          </div>\r\n          <div className=\"today\">\r\n            <div>\r\n              <label>NEW YORK</label>\r\n              <label>today</label>\r\n            </div>\r\n            <label>23°</label>\r\n            <label>sunny</label>\r\n          </div>\r\n          {threeDays &&\r\n            <DaysList list={threeDays} />\r\n          }\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default React.memo(WeatherPage);","import React from 'react';\nimport './assets/css/App.scss';\n\nimport WeatherPage from './pages/WeatherPage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <WeatherPage/>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './assets/css/index.scss';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}